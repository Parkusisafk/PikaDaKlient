plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Loom automatically adds Minecraft & Yarn repos
}

loom {
	splitEnvironmentSourceSets()

	mods {
		pikadaklient {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	runConfigs {
		// *** MODIFY THIS BLOCK ***
		named("client") {
			vmArgs.addAll([
					"-Dfabric.dli.config=client", // Keep this existing line
					// Add all the necessary --add-opens flags here
					'--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
					'--add-opens=java.base/java.net=ALL-UNNAMED',
					'--add-opens=java.base/java.util=ALL-UNNAMED',
					'--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
					'--add-opens=java.base/java.lang=ALL-UNNAMED', // This one is sometimes needed
					'--add-opens=java.base/java.io=ALL-UNNAMED' // Sometimes also required
			])
		}
		// *** END OF MODIFICATION ***

		// Modify the server run configuration (optional, but good practice)
		named("server") {
			// If you ever run a server, you'll want to add the flags here too
			vmArgs.addAll([
					'--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
					// ... other server-side flags
			])
		}
	}

	accessWidenerPath = file("src/main/resources/pikadaklient.accesswidener")
}
// ... rest of your build.gradle

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	withSourcesJar() // attach sources to RemapSourcesJar automatically
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// add publishing repos if needed
	}
}

